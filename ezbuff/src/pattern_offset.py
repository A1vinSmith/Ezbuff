"""This file will contain the function `pattern_offset` which
will find the offset in the pattern generated by the `pattern_create`
in the `pattern_create` file.

Name: pattern_offset.py
"""

from binascii import unhexlify

class PatternOffsetError(Exception):
    """Will handle any exceptions raised while attempting to
    find offset value
    """
    def __init__(self, error_msg):
        super().__init__(error_msg)


def pattern_offset(eip_value, pattern):
    """This function will generate a specific pattern of characters
    to help find offset for buffer overflow

    Args:
        eip_value (str): The specific characters that need to be searched within the `pattern`
                    argument in order to find the offset.
        pattern (str): The pattern generated by the `pattern_create` function defined in
                    `pattern_create.py` file.

    Raises:
        PatternOffsetError: 
    """
    bytes_obj = bytes.fromhex(eip_value)
    ascii_str = bytes_obj.decode("ASCII")[::-1]
    offset = pattern.find(ascii_str)
    try:
        if offset == -1:
            raise PatternOffsetError(f"The string {eip_value[::-1]} could not be found within the genenrated pattern")
    except PatternOffsetError as err:
        print(f"PatternOffsetError: {err}")
    else:
        return offset

